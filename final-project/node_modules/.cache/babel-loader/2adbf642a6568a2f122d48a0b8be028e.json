{"ast":null,"code":"import Axios from 'axios';\nconst URL_API = 'http://localhost:8888/';\nexport const onLoginUser = (EMAIL, PASSWORD) => {\n  return dispatch => {\n    Axios.get(URL_API + 'auth/login', {\n      params: {\n        email: EMAIL,\n        password: PASSWORD,\n        isVerified: 1\n      }\n    }).then(res => {\n      // console.log(res.data)\n      if (res.data.status === '400') {\n        console.log(res.data.message);\n        let _res$data = res.data,\n            status = _res$data.status,\n            message = _res$data.message;\n        dispatch({\n          type: 'LOGIN_FAILED',\n          payload: {\n            status,\n            message\n          }\n        });\n      } else if (res.data.status === '200') {\n        let _res$data$result = res.data.result,\n            id = _res$data$result.id,\n            email = _res$data$result.email,\n            role = _res$data$result.role,\n            firstName = _res$data$result.firstName,\n            lastName = _res$data$result.lastName;\n        localStorage.setItem('userData', JSON.stringify({\n          id,\n          email,\n          role,\n          firstName,\n          lastName\n        }));\n        dispatch({\n          type: 'LOGIN_SUCCESS',\n          payload: {\n            id,\n            email,\n            role,\n            firstName,\n            lastName\n          }\n        });\n      }\n    });\n  };\n};\nexport const keepLogin = USER => {\n  return {\n    type: 'LOGIN_SUCCESS',\n    payload: {\n      id: USER.id,\n      email: USER.email,\n      role: USER.role,\n      firstName: USER.firstName,\n      lastName: USER.lastName\n    }\n  };\n};\nexport const onLogoutUser = () => {\n  localStorage.removeItem('userData');\n  return {\n    type: 'LOGOUT_SUCCESS'\n  };\n};","map":{"version":3,"sources":["C:\\Project\\My-Final-Project\\final-project\\src\\components\\1.actions\\authAction.js"],"names":["Axios","URL_API","onLoginUser","EMAIL","PASSWORD","dispatch","get","params","email","password","isVerified","then","res","data","status","console","log","message","type","payload","result","id","role","firstName","lastName","localStorage","setItem","JSON","stringify","keepLogin","USER","onLogoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAOC,QAAD,IAAc;AAChBL,IAAAA,KAAK,CAACM,GAAN,CACIL,OAAO,GAAG,YADd,EAEI;AACIM,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAEL,KADH;AAEJM,QAAAA,QAAQ,EAAEL,QAFN;AAGJM,QAAAA,UAAU,EAAE;AAHR;AADZ,KAFJ,EASEC,IATF,CASQC,GAAD,IAAS;AACZ;AACA,UAAGA,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,KAAvB,EAA8B;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACC,IAAJ,CAASI,OAArB;AAD0B,wBAEFL,GAAG,CAACC,IAFF;AAAA,YAErBC,MAFqB,aAErBA,MAFqB;AAAA,YAEbG,OAFa,aAEbA,OAFa;AAG1BZ,QAAAA,QAAQ,CAAC;AACLa,UAAAA,IAAI,EAAE,cADD;AAELC,UAAAA,OAAO,EAAE;AACLL,YAAAA,MADK;AACGG,YAAAA;AADH;AAFJ,SAAD,CAAR;AAMH,OATD,MASO,IAAGL,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,KAAvB,EAA8B;AAAA,+BACYF,GAAG,CAACC,IAAJ,CAASO,MADrB;AAAA,YAC5BC,EAD4B,oBAC5BA,EAD4B;AAAA,YACxBb,KADwB,oBACxBA,KADwB;AAAA,YACjBc,IADiB,oBACjBA,IADiB;AAAA,YACXC,SADW,oBACXA,SADW;AAAA,YACAC,QADA,oBACAA,QADA;AAEjCC,QAAAA,YAAY,CAACC,OAAb,CACI,UADJ,EAEIC,IAAI,CAACC,SAAL,CAAe;AAACP,UAAAA,EAAD;AAAKb,UAAAA,KAAL;AAAYc,UAAAA,IAAZ;AAAkBC,UAAAA,SAAlB;AAA6BC,UAAAA;AAA7B,SAAf,CAFJ;AAIAnB,QAAAA,QAAQ,CAAC;AACLa,UAAAA,IAAI,EAAE,eADD;AAELC,UAAAA,OAAO,EAAE;AACLE,YAAAA,EADK;AACDb,YAAAA,KADC;AACMc,YAAAA,IADN;AACYC,YAAAA,SADZ;AACuBC,YAAAA;AADvB;AAFJ,SAAD,CAAR;AAMH;AACJ,KAjCD;AAkCH,GAnCD;AAoCH,CArCM;AAuCP,OAAO,MAAMK,SAAS,GAAIC,IAAD,IAAU;AAC/B,SAAO;AACHZ,IAAAA,IAAI,EAAE,eADH;AAEHC,IAAAA,OAAO,EAAE;AACLE,MAAAA,EAAE,EAAES,IAAI,CAACT,EADJ;AAELb,MAAAA,KAAK,EAAEsB,IAAI,CAACtB,KAFP;AAGLc,MAAAA,IAAI,EAAEQ,IAAI,CAACR,IAHN;AAILC,MAAAA,SAAS,EAAEO,IAAI,CAACP,SAJX;AAKLC,MAAAA,QAAQ,EAAEM,IAAI,CAACN;AALV;AAFN,GAAP;AAUH,CAXM;AAaP,OAAO,MAAMO,YAAY,GAAG,MAAM;AAC9BN,EAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB;AACA,SAAO;AACHd,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CALM","sourcesContent":["import Axios from 'axios'\r\n\r\nconst URL_API = 'http://localhost:8888/'\r\n\r\nexport const onLoginUser = (EMAIL, PASSWORD) => {\r\n    return(dispatch) => {\r\n        Axios.get(\r\n            URL_API + 'auth/login',\r\n            {\r\n                params: {\r\n                    email: EMAIL,\r\n                    password: PASSWORD,\r\n                    isVerified: 1\r\n                }\r\n            }\r\n        ).then((res) => {\r\n            // console.log(res.data)\r\n            if(res.data.status === '400') {\r\n                console.log(res.data.message)\r\n                let {status, message} = res.data\r\n                dispatch({\r\n                    type: 'LOGIN_FAILED',\r\n                    payload: {\r\n                        status, message\r\n                    }\r\n                })\r\n            } else if(res.data.status === '200') {\r\n                let {id, email, role, firstName, lastName} = res.data.result\r\n                localStorage.setItem(\r\n                    'userData',\r\n                    JSON.stringify({id, email, role, firstName, lastName})\r\n                )\r\n                dispatch({\r\n                    type: 'LOGIN_SUCCESS',\r\n                    payload: {\r\n                        id, email, role, firstName, lastName\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const keepLogin = (USER) => {\r\n    return {\r\n        type: 'LOGIN_SUCCESS',\r\n        payload: {\r\n            id: USER.id,\r\n            email: USER.email,\r\n            role: USER.role,\r\n            firstName: USER.firstName,\r\n            lastName: USER.lastName\r\n        }\r\n    }\r\n}\r\n\r\nexport const onLogoutUser = () => {\r\n    localStorage.removeItem('userData')\r\n    return {\r\n        type: 'LOGOUT_SUCCESS'\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}